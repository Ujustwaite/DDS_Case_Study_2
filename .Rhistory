install.packages("plotly")
library(plotly)
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot()
library(readxl)
library(caret)
library(dplyr)
cs2Raw <- read_excel("~/SMU/Doing Data Science/CaseStudy2/CaseStudy2-data.xlsx")
groupYearsAtCompany = function(YearsAtCompany){
group = character()
if (YearsAtCompany >= 0 & YearsAtCompany <= 5) {group = "0-5"}
if (YearsAtCompany > 5 & YearsAtCompany <= 10) {group = "5-10"}
if (YearsAtCompany > 10 & YearsAtCompany <= 20) {group = "10-20"}
if (YearsAtCompany > 20 & YearsAtCompany <= 30) {group = "20-30"}
if (YearsAtCompany > 30 & YearsAtCompany <= 40) {group = "30-40"}
if (YearsAtCompany > 40) {group = "40+"}
return(group)
}
cs2Raw$YearsAtCompanyGroup = lapply(cs2Raw$YearsAtCompany, groupYearsAtCompany)
summary(cs2Raw)
#lots to see here
hist(cs2Raw$Age)
#Age looks normal, no "wave" of retirees coming.
hist(cs2Raw$PerformanceRating)
#Performance rating system may not be functioning as desired. Unable to distinguish variations in performance. Lower scores?
#Need to check definitions.
hist(cs2Raw$MonthlyIncome)
#just curious
hist(cs2Raw$DistanceFromHome)
#Significant number of employees live more than 10 miles away. Commuting incentives?
hist(cs2Raw$YearsSinceLastPromotion)
#Look at Job Satisfaction Stats in different departments
boxplot(cs2Raw$JobSatisfaction~cs2Raw$Department)
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot()
#now by work role
boxplot(cs2Raw$JobSatisfaction~cs2Raw$JobRole, las = 2)
#ooohhhhhh There is something interesting! Human Resources Job Satisfaction below average!
#Lots of below 3.0s here.
boxplot(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),]$JobSatisfaction~cs2Raw[which(cs2Raw$JobRole == "Human Resources"),]$EmployeeNumber)
#Mean human resources person
mean(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),]$JobSatisfaction)
#Mean
#Just exploring something....but it doesn't appear to have born fruit
boxplot(cs2Raw$JobSatisfaction~as.character(cs2Raw$YearsAtCompanyGroup))
boxplot(cs2Raw$MonthlyIncome~cs2Raw$JobRole, las = 2)
#Looks like people's job satisfaction has nothing to do with how much they are being paid
boxplot(log(cs2Raw$MonthlyIncome)~cs2Raw$JobSatisfaction)
#by department
cs2Raw$EmployeeMonthlyProfit = cs2Raw$MonthlyRate - cs2Raw$MonthlyIncome
barplot(table(cs2Raw[which(cs2Raw$EmployeeMonthlyProfit < 0),5]))
#by job role
barplot(table(cs2Raw[which(cs2Raw$EmployeeMonthlyProfit < 0),16]), las = 2)
#attrition by
#Department
#Job satisfaction vs. attrition shows that happy people are not leaving, unhappy people are
boxplot(cs2Raw$JobSatisfaction~cs2Raw$Attrition)
#Maybe we can build a predictor to determine whether people will quit?
#Candidate feature
boxplot(cs2Raw$JobSatisfaction~cs2Raw$Attrition)
boxplot(log(cs2Raw$YearsSinceLastPromotion)~cs2Raw$Attrition)
boxplot(log(cs2Raw$YearsAtCompany)~cs2Raw$Attrition)
boxplot(cs2Raw$JobLevel~cs2Raw$Attrition)
boxplot(log(cs2Raw$MonthlyIncome)~cs2Raw$Attrition)
boxplot(cs2Raw$DistanceFromHome~cs2Raw$Attrition)
cs2Raw$AttritionCode = 0;
cs2Raw[which(cs2Raw$Attrition == "Yes"),]$AttritionCode = 1
cs2Raw[which(cs2Raw$Attrition == "No"), ]$AttritionCode = 0
cs2Raw$OverTimeCode = 0;
cs2Raw[which(cs2Raw$OverTime == "Yes"),]$OverTimeCode = 1
cs2Raw[which(cs2Raw$OverTime == "No"), ]$OverTimeCode = 0
#attrition
denominator = dim(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),])[1]
numerator = sum(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),]$AttritionCode)
percentAttrition = numerator / denominator * 100
jobrolelist = unique(cs2Raw$JobRole)
jobroleAttritionRates = data.frame()
for (jobrole in jobrolelist) {
denominator = dim(cs2Raw[which(cs2Raw$JobRole == jobrole),])
numerator = sum(cs2Raw[which(cs2Raw$JobRole == jobrole),]$AttritionCode)
percentAttrition = round(numerator/denominator[1]*100, 2)
jobroleAttritionRates = rbind(percentAttrition,jobroleAttritionRates)
}
jobroleAttritionRates = cbind(jobroleAttritionRates, jobrolelist)
jobroleAttritionRates = as.data.frame(jobroleAttritionRates)
names(jobroleAttritionRates) = c("Rate","JobRole")
ggplot(jobroleAttritionRates, aes(x = factor(JobRole), y = Rate)) +
xlab("Job Role")+
ylab("Attrition Rate")+
geom_bar(stat = "identity") +
coord_flip()
############Model Attrition#########################
trainset = cs2Raw[1:985,]
testset = cs2Raw[986:1470,]
modeltest = glm(data = trainset, AttritionCode~JobSatisfaction + factor(Department) + factor(JobRole) + DistanceFromHome + YearsAtCompany + YearsSinceLastPromotion + DistanceFromHome*JobSatisfaction, family = "binomial")
predictions = predict(modeltest, newdata = testset, type = "response")
testset$PredictedAttrition = predictions
testset[which(testset$PredictedAttrition >= 0.34), ]$PredictedAttrition = 1
testset[which(testset$PredictedAttrition < 0.34), ]$PredictedAttrition = 0
results = as.data.frame(cbind(testset$AttritionCode, testset$PredictedAttrition))
View(results)
results$match = results$V1 == results$V2
library(MLmetrics)
Precision(results$V1, results$V2)
Recall(results$V1, results$V2)
Accuracy(results$V1, results$V2)
####################################################
###################################################
#Model 2
model = glm(data = trainset, formula = AttritionCode~Age + DailyRate + Education + HourlyRate+ JobRole + MonthlyIncome + PerformanceRating + StockOptionLevel + WorkLifeBalance + YearsSinceLastPromotion + Department + EducationField + EnvironmentSatisfaction + JobInvolvement + MonthlyRate + OverTime + RelationshipSatisfaction + TotalWorkingYears + YearsAtCompany + YearsWithCurrManager + BusinessTravel + DistanceFromHome + EmployeeCount + Gender + JobLevel + MaritalStatus + NumCompaniesWorked + PercentSalaryHike + StandardHours + TrainingTimesLastYear + YearsInCurrentRole, family = binomial(logit))
model = glm(data = trainset, formula = AttritionCode ~ Age + JobRole + StockOptionLevel + WorkLifeBalance +
YearsSinceLastPromotion + EnvironmentSatisfaction + JobInvolvement +
OverTime + RelationshipSatisfaction + YearsAtCompany + YearsWithCurrManager +
BusinessTravel + DistanceFromHome + Gender + MaritalStatus +
NumCompaniesWorked + YearsInCurrentRole, family = binomial(logit))
importance = varImp(model)
storeNames = row.names(importance)
storeNames = cbind(storeNames,importance)
storeNames = arrange(storeNames, -Overall)
names(storeNames) = c("Variable","Importance")
summary(model)
predictions = predict(model, newdata = testset, type = "response")
testset$PredictedAttrition = predictions
testset[which(testset$PredictedAttrition >= 0.5), ]$PredictedAttrition = 1
testset[which(testset$PredictedAttrition < 0.5), ]$PredictedAttrition = 0
results = as.data.frame(cbind(testset$AttritionCode, testset$PredictedAttrition))
View(results)
Precision(results$V1, results$V2)
Recall(results$V1, results$V2)
Accuracy(results$V1, results$V2)
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot()
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot()+
scale_x_discrete(name = "Department")+
scale_y_continuous(name = "Job Satisfaction Score Distribution")+
ggtitle("Job Satisfaction Survey Score by Department")
fill <- "#4271AE"
line <- "#1F3552"
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Department")+
scale_y_continuous(name = "Job Satisfaction Score Distribution")+
ggtitle("Job Satisfaction Survey Score by Department")
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Department")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0, 5)+
ggtitle("Job Satisfaction Survey Score by Department")
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Department")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0, 5))+
ggtitle("Job Satisfaction Survey Score by Department")
fill <- "#4271AE"
line <- "#1F3552"
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Department")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0, 5))+
ggtitle("Job Satisfaction Survey Score by Department")
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Department")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0.5, 4.5))+
ggtitle("Job Satisfaction Survey Score by Department")
fill <- "#4271AE"
line <- "#1F3552"
ggplot(cs2Raw, aes(x = Department, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Department")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0.5, 4.5))+
ggtitle("Job Satisfaction Survey Score by Department")+
theme_minimal()
ggplot(cs2Raw, aes(x = JobRole, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Job Role")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0.5, 4.5))+
ggtitle("Job Satisfaction Survey Score by Job Role")+
theme_minimal()
ggplot(cs2Raw, aes(x = JobRole, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Job Role")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0.5, 4.5))+
ggtitle("Job Satisfaction Survey Score by Job Role")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme_minimal()
ggplot(cs2Raw, aes(x = JobRole, y = JobSatisfaction)) +
geom_boxplot(fill = fill, colour = line, alpha = 0.7)+
scale_x_discrete(name = "Job Role")+
scale_y_continuous(name = "Job Satisfaction Score Distribution", limits=c(0.5, 4.5))+
ggtitle("Job Satisfaction Survey Score by Job Role")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Get mean for non-HR roles
mean(cs2Raw[which(cs2Raw$JobRole != "Human Resources"),]$JobSatisfaction)
#Get mean for HR role
mean(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),]$JobSatisfaction)
#Find the difference
#Get mean for non-HR roles
mean_non_HR = mean(cs2Raw[which(cs2Raw$JobRole != "Human Resources"),]$JobSatisfaction)
#Get mean for HR role
mean_HR = mean(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),]$JobSatisfaction)
#Find the difference
diff = (mean_HR / mean_non_HR)*100
diff
100-(mean_HR / mean_non_HR)*100
ggplot(cs2Raw, aes(x = Age)) + geom_histogram()
return(group)
ggplot(cs2Raw, aes(x = Age)) + geom_histogram(binwidth = 1.0)
ggplot(cs2Raw, aes(x = Age)) +
geom_histogram(binwidth = 1.0) +
ggtitle("DDSAnalytics Employee Age Distribution")+
theme_minimal()
ggplot(cs2Raw, aes(x = Age)) +
geom_histogram(binwidth = 1.0) +
ggtitle("DDSAnalytics Employee Age Distribution")+
geom_density(alpha=.2, fill=fill)+
theme_minimal()
ggplot(cs2Raw, aes(x = Age)) +
geom_histogram(binwidth = 1.0) +
ggtitle("DDSAnalytics Employee Age Distribution")+
theme_minimal()
ggplot(cs2Raw, aes(x = Age)) +
geom_histogram(binwidth = 1.0, color=line, fill=fill) +
ggtitle("DDSAnalytics Employee Age Distribution")+
theme_minimal()
unique(cs2Raw$Department)
#Number of Departments
length(unique(cs2Raw$Department))
dim(cs2Raw)
length(unique(cs2Raw$EmployeeNumber))
length(unique(cs2Raw$JobRole))
male = length(cs2Raw[which(cs2Raw$Gender == "Male"),])
male
male = dim(cs2Raw[which(cs2Raw$Gender == "Male"),])
male
male = dim(cs2Raw[which(cs2Raw$Gender == "Male"),])[1]
male
female = dim(cs2Raw[which(cs2Raw$Gender == "Female"),])[1]
female
male + female
maleperc = male / 1470 * 100
female = dim(cs2Raw[which(cs2Raw$Gender == "Female"),])[1]
femaleperc = female / 1470 * 100
maleperc
femaleperc
genderDF = as.data.frame(c("Male","Female"))
genderDF = cbind(genderDF, c(maleperc, femaleperc))
genderDF
names(genderDF) = c("Gender","Percent")
genderplot = ggplot(data = genderDF, aes(x = "", y = Percent, fill = Gender))+ geom_bar(width = 1, stat = "identity")
names(genderDF) = c("Gender","Percent")
genderplot = ggplot(data = genderDF, aes(x = "", y = Percent, fill = Gender)) + geom_bar(width = 1, stat = "identity")
genderDF
genderplot
pie = genderplot + coord_polar("y", start = 0)
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
theme_minimal()
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent + c(0, cumsum(Percent)[-length(Percent)]), label = percent(Percent)), size=5)
theme_minimal()
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent + c(0, cumsum(Percent)[-length(Percent)]), label = Percent), size=5)
theme_minimal()
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
theme(axis.text.x=element_blank()) +
geom_text(aes(y = Percent + c(0, cumsum(Percent)[-length(Percent)]), label = Percent), size=5)
theme_minimal()
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
theme(axis.text.x=element_blank()) +
geom_text(aes(y = Percent + c(0, cumsum(Percent)[-length(Percent)]), label = Percent), size=5)+
theme_minimal()
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent + c(0, cumsum(Percent)[-length(Percent)]), label = Percent), size=5)+
theme_minimal()+
theme(axis.text.x=element_blank())
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent/2 + c(0, cumsum(Percent)[-length(Percent)]), label = Percent), size=5)+
theme_minimal()+
theme(axis.text.x=element_blank())
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent/2 + c(0, cumsum(Percent)[-length(Percent)]), label = c("Male", "Female")), size=5)+
theme_minimal()+
theme(axis.text.x=element_blank())
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent/2 + c(0, cumsum(Percent)[-length(Percent)]), label = c("Male", "Female")), size=5)+
xlab = "" + ylab = ""+
theme_minimal()+
theme(axis.text.x=element_blank())
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent/2 + c(0, cumsum(Percent)[-length(Percent)]), label = c("Male", "Female")), size=5)+
xlab = " " + ylab = " "+
theme_minimal()+
theme(axis.text.x=element_blank())
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent/2 + c(0, cumsum(Percent)[-length(Percent)]), label = c("Male", "Female")), size=5)+
theme_minimal()+
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x=element_blank())
pie
pie = genderplot + coord_polar("y", start = 0)+ scale_fill_brewer(palette="Blues")+
geom_text(aes(y = Percent/2 + c(0, cumsum(Percent)[-length(Percent)]), label = c("Male", "Female")), size=5)+
theme_minimal()+
ggtitle("Workforce Gender Distribution")+
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x=element_blank())
pie
ggplot(jobroleAttritionRates, aes(x = factor(JobRole), y = Rate)) +
xlab("Job Role")+
ylab("Attrition Rate")+
geom_bar(stat = "identity") +
coord_flip()
ggplot(jobroleAttritionRates, aes(x = factor(JobRole), y = Rate)) +
xlab("Job Role")+
ylab("Attrition Rate")+
geom_bar(stat = "identity", fill = fill, colour = line, alpha = 0.7) +
coord_flip()
ggplot(jobroleAttritionRates, aes(x = factor(JobRole), y = Rate)) +
xlab("Job Role")+
ylab("Attrition Rate")+
geom_bar(stat = "identity", fill = fill, colour = line, alpha = 0.7) +
coord_flip()+
theme_minimal()
ggplot(jobroleAttritionRates, aes(x = factor(JobRole), y = Rate)) +
ggtitle("Attrition Rates by Job Role")
xlab("Job Role")+
ylab("Attrition Rate")+
geom_bar(stat = "identity", fill = fill, colour = line, alpha = 0.7) +
coord_flip()+
theme_minimal()
ggplot(jobroleAttritionRates, aes(x = factor(JobRole), y = Rate)) +
ggtitle("Attrition Rates by Job Role")+
xlab("Job Role")+
ylab("Attrition Rate")+
geom_bar(stat = "identity", fill = fill, colour = line, alpha = 0.7) +
coord_flip()+
theme_minimal()
model = glm(data = trainset, formula = AttritionCode ~ Age + JobRole + StockOptionLevel + WorkLifeBalance +
YearsSinceLastPromotion + EnvironmentSatisfaction + JobInvolvement +
OverTime + RelationshipSatisfaction + YearsAtCompany + YearsWithCurrManager +
BusinessTravel + DistanceFromHome + Gender + MaritalStatus +
NumCompaniesWorked + YearsInCurrentRole, family = binomial(logit))
importance = varImp(model)
storeNames = row.names(importance)
storeNames = cbind(storeNames,importance)
storeNames = arrange(storeNames, -Overall)
names(storeNames) = c("Variable","Importance")
storeNames
Precision(results$V1, results$V2)
Recall(results$V1, results$V2)
Accuracy(results$V1, results$V2)
names(storeNames) = c("Variable","Importance")
sum(storeNames$Importance)
knitr::kable(storeNames)
Precision(results$V1, results$V2)
Recall(results$V1, results$V2)
Accuracy(results$V1, results$V2)
library(readr)
library(caret)
library(mlbench)
train <- read_csv("~/SASUniversityEdition/myfolders/KaggleProject/train.csv")
View(train)
correlationMatrix = cor(train[,c("MSSubClass", "LotFrontage","LotArea","GrLivArea","FullBath","BedroomAbvGr","Fireplaces","YearBuilt","GarageArea","WoodDeckSF","OpenPorchSF","YrSold")])
View(correlationMatrix)
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.5)
View(highlyCorrelate)
control = trainControl(method="repeatedcv", number = 10, repeats = 3)
model = train(data = train, SalePrice~MSSubClass + LotFrontage + LotArea + GrLivArea + FullBath + BedroomAbvGr + Fireplaces + YearBuilt + GarageArea + WoodDeckSF + OpenPorchSF + YrSold, method ="glmboost", preProcess="scale", trControl=control, na.action = na.omit)
summary(model)
importance = varImp(model, scale=FALSE)
boxplot(log(train$SalePrice)~log(train$OverallQual))
colSums(is.na(train))
sum(train$FullBath==0)
mean(LotFrontage)
library(readr)
library(caret)
library(mlbench)
train <- read_csv("~/SASUniversityEdition/myfolders/KaggleProject/train.csv")
View(train)
correlationMatrix = cor(train[,c("MSSubClass", "LotFrontage","LotArea","GrLivArea","FullBath","BedroomAbvGr","Fireplaces","YearBuilt","GarageArea","WoodDeckSF","OpenPorchSF","YrSold")])
View(correlationMatrix)
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.5)
View(highlyCorrelate)
control = trainControl(method="repeatedcv", number = 10, repeats = 3)
model = train(data = train, SalePrice~MSSubClass + LotFrontage + LotArea + GrLivArea + FullBath + BedroomAbvGr + Fireplaces + YearBuilt + GarageArea + WoodDeckSF + OpenPorchSF + YrSold, method ="glmboost", preProcess="scale", trControl=control, na.action = na.omit)
summary(model)
importance = varImp(model, scale=FALSE)
boxplot(log(train$SalePrice)~log(train$OverallQual))
colSums(is.na(train))
sum(train$FullBath==0)
library(readr)
library(caret)
library(mlbench)
train <- read_csv("~/SASUniversityEdition/myfolders/KaggleProject/train.csv")
View(train)
correlationMatrix = cor(train[,c("SalePrice","MSSubClass", "LotFrontage","LotArea","GrLivArea","FullBath","BedroomAbvGr","Fireplaces","YearBuilt","GarageArea","WoodDeckSF","OpenPorchSF","YrSold")])
View(correlationMatrix)
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.5)
View(highlyCorrelate)
control = trainControl(method="repeatedcv", number = 10, repeats = 3)
model = train(data = train, SalePrice~MSSubClass + LotFrontage + LotArea + GrLivArea + FullBath + BedroomAbvGr + Fireplaces + YearBuilt + GarageArea + WoodDeckSF + OpenPorchSF + YrSold, method ="glmboost", preProcess="scale", trControl=control, na.action = na.omit)
summary(model)
importance = varImp(model, scale=FALSE)
boxplot(log(train$SalePrice)~log(train$OverallQual))
colSums(is.na(train))
mean(train$WoodDeckSF)
train$LotArea == 0
sum(train$LotArea == 0)
cs2Raw[which(cs2Raw$JobRole == "Laboratory Technician"),]$Overtime
cs2Raw[which(cs2Raw$JobRole == "Laboratory Technician"),]$Overtime
names(cs2Raw)
cs2Raw[which(cs2Raw$JobRole == "Laboratory Technician"),]$OverTimeCode
sum(cs2Raw[which(cs2Raw$JobRole == "Laboratory Technician"),]$OverTimeCode)
dim(cs2Raw[which(cs2Raw$JobRole == "Laboratory Technician"),])
62/259
sum(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),]$OverTimeCode)
dim(cs2Raw[which(cs2Raw$JobRole == "Human Resources"),])
13/52
dim(cs2Raw[which(cs2Raw$JobRole == "Sales"),])
dim(cs2Raw[which(cs2Raw$JobRole == "Manager"),])
sum(cs2Raw[which(cs2Raw$JobRole == "Manager"),]$OverTimeCode)
27/102
dim(cs2Raw[which(cs2Raw$JobRole == "Manager"),])
jobrolelist
mode(cs2Raw$TotalBsmtSF)
library(readr)
library(caret)
library(mlbench)
train <- read_csv("~/SASUniversityEdition/myfolders/KaggleProject/train.csv")
View(train)
correlationMatrix = cor(train[,c("SalePrice","MSSubClass", "LotFrontage","LotArea","GrLivArea","FullBath","BedroomAbvGr","Fireplaces","YearBuilt","GarageArea","WoodDeckSF","OpenPorchSF","YrSold")])
View(correlationMatrix)
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.5)
View(highlyCorrelate)
control = trainControl(method="repeatedcv", number = 10, repeats = 3)
model = train(data = train, SalePrice~MSSubClass + LotFrontage + LotArea + GrLivArea + FullBath + BedroomAbvGr + Fireplaces + YearBuilt + GarageArea + WoodDeckSF + OpenPorchSF + YrSold, method ="glmboost", preProcess="scale", trControl=control, na.action = na.omit)
summary(model)
importance = varImp(model, scale=FALSE)
boxplot(log(train$SalePrice)~log(train$OverallQual))
colSums(is.na(train))
sum(train$FullBath==0)
mode(cs2Raw$TotalBsmtSF)
mode(train$TotalBsmtSF)
?median
median(train$TotalBsmtSF)
median(train$GarageArea)
boxplot(log(cs2Raw$MonthlyIncome)~cs2Raw$Attrition)
groupIncome = function(MonthlyIncome){
group = character()
if (MonthlyIncome >= 0 & MonthlyIncome <= 2000) {group = "0-2000"}
if (MonthlyIncome > 2000 & MonthlyIncome <= 5000) {group = "2000-5000"}
if (MonthlyIncome > 5000 & MonthlyIncome <= 8000) {group = "5000-8000"}
if (MonthlyIncome > 8000 & MonthlyIncome <= 10000) {group = "8000-10000"}
if (MonthlyIncome > 10000 & MonthlyIncome <= 20000) {group = "10000-20000"}
if (MonthlyIncome > 20000) {group = "20000+"}
return(group)
}
cs2Raw$MonthlyIncomeGroup = lapply(cs2Raw$MonthlyIncome, groupIncome)
cs2Raw$MonthlyIncomeGroup
boxplot(cs2Raw$MonthlyIncomeGroup~cs2Raw~Attrition)
boxplot(cs2Raw$MonthlyIncomeGroup~cs2Raw$Attrition)
boxplot(cs2Raw$MonthlyIncomeGroup~cs2Raw$AttritionCode)
boxplot(frequency(cs2Raw$MonthlyIncomeGroup)~cs2Raw$AttritionCode)
table(cs2Raw$MonthlyIncomeGroup)
